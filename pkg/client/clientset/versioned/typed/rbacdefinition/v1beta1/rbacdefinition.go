/*
Copyright 2019 The Openshift Evangelists

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1beta1

import (
	"time"

	v1beta1 "github.com/darkrat/cajadepandora/pkg/apis/RBACDefinition/v1beta1"
	scheme "github.com/darkrat/cajadepandora/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// RBACDefinitionsGetter has a method to return a RBACDefinitionInterface.
// A group's client should implement this interface.
type RBACDefinitionsGetter interface {
	RBACDefinitions(namespace string) RBACDefinitionInterface
}

// RBACDefinitionInterface has methods to work with RBACDefinition resources.
type RBACDefinitionInterface interface {
	Create(*v1beta1.RBACDefinition) (*v1beta1.RBACDefinition, error)
	Update(*v1beta1.RBACDefinition) (*v1beta1.RBACDefinition, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1beta1.RBACDefinition, error)
	List(opts v1.ListOptions) (*v1beta1.RBACDefinitionList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.RBACDefinition, err error)
	RBACDefinitionExpansion
}

// rBACDefinitions implements RBACDefinitionInterface
type rBACDefinitions struct {
	client rest.Interface
	ns     string
}

// newRBACDefinitions returns a RBACDefinitions
func newRBACDefinitions(c *RbacmanagerV1beta1Client, namespace string) *rBACDefinitions {
	return &rBACDefinitions{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the rBACDefinition, and returns the corresponding rBACDefinition object, and an error if there is any.
func (c *rBACDefinitions) Get(name string, options v1.GetOptions) (result *v1beta1.RBACDefinition, err error) {
	result = &v1beta1.RBACDefinition{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("rbacdefinitions").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of RBACDefinitions that match those selectors.
func (c *rBACDefinitions) List(opts v1.ListOptions) (result *v1beta1.RBACDefinitionList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1beta1.RBACDefinitionList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("rbacdefinitions").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested rBACDefinitions.
func (c *rBACDefinitions) Watch(opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("rbacdefinitions").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a rBACDefinition and creates it.  Returns the server's representation of the rBACDefinition, and an error, if there is any.
func (c *rBACDefinitions) Create(rBACDefinition *v1beta1.RBACDefinition) (result *v1beta1.RBACDefinition, err error) {
	result = &v1beta1.RBACDefinition{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("rbacdefinitions").
		Body(rBACDefinition).
		Do().
		Into(result)
	return
}

// Update takes the representation of a rBACDefinition and updates it. Returns the server's representation of the rBACDefinition, and an error, if there is any.
func (c *rBACDefinitions) Update(rBACDefinition *v1beta1.RBACDefinition) (result *v1beta1.RBACDefinition, err error) {
	result = &v1beta1.RBACDefinition{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("rbacdefinitions").
		Name(rBACDefinition.Name).
		Body(rBACDefinition).
		Do().
		Into(result)
	return
}

// Delete takes name of the rBACDefinition and deletes it. Returns an error if one occurs.
func (c *rBACDefinitions) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("rbacdefinitions").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *rBACDefinitions) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("rbacdefinitions").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched rBACDefinition.
func (c *rBACDefinitions) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.RBACDefinition, err error) {
	result = &v1beta1.RBACDefinition{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("rbacdefinitions").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
